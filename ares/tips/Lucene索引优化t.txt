Lucene索引优化

1、确认使用最新的版本
2、使用本地文件系统、如果非要放到远程文件系统，请先在本地生成后放到远程服务器上
3、使用更好的设备，特别是I/O性能好的设备
4、索引期间复用单一的IndexWriter
5、使用内存消耗代替文档数量flush,注意：maxbuffereddocs不要设定的小了，否则使用文档数量，根据内存使用数量flush，可以减少写入segement的数量，生成的segement    文件较大，减少了文件合并次数，尽可能的使用你能接受的内存大小
6、关闭符合文件索引，性能消耗较大，但是这样会导致文件数量增多，打开大量的文件同样会增加性能消耗，甚至会用完文件句柄。所以这个要配合合并因子共同使用
7、重用Document和Field实例，注意同一个Document中的Field是不可以重用的，不同的Document可以重用Field,以减少GC回收的次数
8、在你的分析器Analyzer使用单一的Token实例，Token中使用char[]接口代替String接口，可以减少生成的字符串
9、如果你的索引文件中有很多小的文本字段，你可以把它合并到一个内容字段中。
10、加大mergeFactor合并因子，但不是越大越好
11、关闭所有不在使用的功能
12、使用更快的分析器，以前StanderAnalyzer很慢
13、加快文档构建时间，通常文档的数据源来自数据库、互联网，我们应该尽可能的加快数据的获取
14、在真正需要optimizer的时候在使用，不要随意使用
15、在多线程中使用一个共享的IndexWrter
16、将文档分在不同的机器上索引然后合并
17、获取文档时使用FieldSelector选择你需要的Field不要获取多余的Field
18、考虑使用Filter,将查询限制在部分索引中，也称为查询重写

索引优化的相关参数

1、mergeFactor控制磁盘上segement的合并频率
2、maxMergeDoc控制磁盘中segement中Document中的最大数量，但是要注意这个东西会反作用于内存中的Document的数量，例如maxMergeDoc设置为100个，但是内存中的设置    大于这个值，则内存中实际上是以100为准的，如果内存中设置的数量小于这个值则以内存中的设置为主
3、maxBufferedDocs内存中最大的Document的数量
4、RAMBufferSizeMB设置最大内存使用量