1、升级JDK版本、新版本的JDK对类库api和jvm的执行性能都有所增强，特别是jdk1.6针对性能做了大幅增强
2、尽量减少对象的创建、对象创建有一定得开销、同时会对垃圾回收器造成很大的影响，影响应用的性能，可以使用        clone()创建对象
3、尽量消除不必要的计算。比如for循环中列表长度的重复计算、列表是否为空或为null的条件检测
3、尽量使用局部变量，局部变量保存在栈上、静态变量和实例变量保存在堆上，相比堆上创建对象，栈上创建对象开销小    而且访问速度快
4、如果应用允许，使用非线程安全的类替代线程安全的类
5、根据操作的特点选择合适数据结构，比如选择ArrayList还是LinkedList
6、完成相同功能时，应用程序要尽量选择性能较高的一些api，比如数组拷贝选择system.arraycopy()、线程同步使用       ReentrantLock代替synchronized、单个字符查找使用CharAt()代替IndexOf()、使用Stringtokenizer来替代String的方    法来分析字符串等等。
7、尽量使用内存开销较小的操作，比如不要在循环体内初始化变量
8、使用final关键词修饰常量，这样编译器和处理器会对其进行优化，但是不要使用其修饰修饰类和方法，我们不要打着性    能优化的幌子去破坏JAVA应用的可扩展性、因为JVM会在运行时对程序优化，而且它会做出比程序员好很多的优化方案、    不过其实关于final方法会内联调用，从而达到性能优化一直在开发人员中存在一个错误的认识，认为加上final的方法    就会内联调用其实大错特错了，JVM出于安全只会对private的方法进行内联调用，而private方法原本就是final的，不    需要这个关键词                                                                                            9、数据库调用使用连接池及编写符合sql调优原则的sql语句。                                                     10、JVM优化、调整内存堆得大小、调整垃圾回收算法                                                             11、for循环中尽量把大的循环放在里边，减少循环体上下文的切换