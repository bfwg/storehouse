JAVA的接口常量（普通类型，如int or String）在JDK1.5之前基本是被用来模拟Enumeration的，她的最大缺点就是:

当某个类或接口支持多组不同含义的常量组时，常量的使用常常陷入混乱，并写出可读性极差的代码(使用Enum我们可以使用任何可以代表常量意义的Enum实例来表示，故而可以提高可读性)，使用也不方便我们在使用的时候必须准确的常量的数据类型,且有些时候我们使用常量的地方可能只允许常量组中的常量出现
而不允许和常量同类型的其他数值出现，就要进行边界检测，常量接口不能提供这个功能，我们也不能对常量接口遍历，如果这些常量要出现在switch语句中，由于switch
语句严格的限制，而无法使用。另外，常量接口是对接口一种不正确的使用。所以java中才引入了Enum这个新的类型，可以满足所有上述要求。Enum中的类型安全是相对于其他编程语言中的Enum而言的，比如C

相关实例

代码混乱

java.util.Calendar.class   代表与计算一个日期类型，拥有众多常量， 
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝》 
For   the   date   fields:   （这一组是用来指定特定日期的常量字段） 

          YEAR   +   MONTH   +   DAY_OF_MONTH 
          YEAR   +   MONTH   +   WEEK_OF_MONTH   +   DAY_OF_WEEK 
          YEAR   +   MONTH   +   DAY_OF_WEEK_IN_MONTH   +   DAY_OF_WEEK 
          YEAR   +   DAY_OF_YEAR 
          YEAR   +   DAY_OF_WEEK   +   WEEK_OF_YEAR 
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝》 
For   the   time   of   day   fields:（这一组是用来指定特定时间的常量字段） 

          HOUR_OF_DAY 
          HOUR   +   MINUTE   +   SECOND 
          AM_PM   +   HOUR 
＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝＝》 

当设置年份时(Calendar.YEAR   is   1)，通常的做法是这样： 

Calendar   calendar   =   Calendar.getInstance(); 
int   expectedYearValue   =   2006; 
calendar.set(Calendar.YEAR,   expectedYearValue); 

但是...你通常也可以这样 
Calendar   calendar   =   Calendar.getInstance(); 
int   expectedYearValue   =   2006; 
calendar.set(Calendar.PM,   expectedYearValue); 

由于Calendar.PM   和   Calendar.YEAR常量的值相同（都为整型   1），所以这里互换之后编译器不会发出任何警报，事实上你依然赋值了YEAR字段，但是阅读代码的人却看的莫名其妙，一头雾水，她或他不得不深入代码细节去看个究竟，这里更本就不该有PM常量的身影，她本来更本不该作为这个方法的参数而存在... 

-----------------------------------------------------------------------------------------------------------------------------------------------------

另一个麻烦在于边界检测，再比如上例的Calendar.set方法，她其中一个版本的完全申明如下： 
set(field:   int,   value:   int)   :   void 

field字段如上个问题中一样是代表需要赋值的字段是什么，第二个字段则是需要赋予的值 
field字段本质上仅仅是一个int类型的变量（其他各种简单变量都可以，比如char,   String,   float...），所以你往往可以硬编码，比如我要赋值Year字段： 

int   expectedYearValue   =   2006; 
calendar.set(1,   expectedYearValue); 

这里编译器不会爆任何错误，然后我们再改动一下 
calendar.set(999,   expectedYearValue); 

编译器仍然认为是正确的，只有当进入运行时才会导致错误...   ...编译器的强大功能被完全忽略和跳过了...这也可能会导致某种潜在的程序缺陷 

-------------------------------------------------------------------------------------------------------------------------------------------------------

所以综上所述，直接使用int,   char   or   String...这些简单类型作为常量使用是不太明智的（除非这些类型确实正好体现了他们需要代表常量的类型，比如   static   final   int   MAX_INT_VALUE   =   999;）。 

如果使用的是JDK1.5版本或以上，可以直接是使用Enum类型来代替这些东西，Enum的静态类型检查会大大有助于提高程序的可读性和健壮性； 
如果很不幸的，你还必须使用JDK1.4或以下版本，比如我，可以参考《Effective   Java》第5章21条，“用类来代替enum结构”，事实上JDK1.5中对Enum的模拟就是基于这种方式，只是将这种功能嵌入了语言特性中变成了语言的固有部分而已。 
